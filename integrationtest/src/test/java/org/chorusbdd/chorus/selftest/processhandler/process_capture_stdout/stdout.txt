Feature: Capture Std Output                                                                          
Chorus --> INFO    - Running feature from file: src/test/java/org/chorusbdd/chorus/selftest/processhandler/process_capture_stdout/capturestdout.feature
Chorus --> INFO    - No default handler found for Feature: (Capture Std Output), will use built-in handlers and Uses: statements
  Scenario: I expect some output
Chorus --> INFO    - Processing scenario: I expect some output
Chorus --> INFO    - About to run process:  <system specific process details replaced>
    Given I start a config1 process named outputter                                          PASSED  
    When I read the line 'let's match a line' from outputter process                         PASSED  
    Then I read the line 'and another .* line' from outputter process                        PASSED  
  Scenario: Matched pattern is stored in chorus context
Chorus --> INFO    - Processing scenario: Matched pattern is stored in chorus context
Chorus --> INFO    - About to run process:  <system specific process details replaced>
    Given I start a config1 process named outputter                                          PASSED  
    When I read the line 'let's .* a line' from outputter process                            PASSED  
    Then context variable ProcessesHandler.match has the value let's match a line            PASSED  
  Scenario: I expect some output from noisy process
Chorus --> INFO    - Processing scenario: I expect some output from noisy process
Chorus --> INFO    - About to run process:  <system specific process details replaced>
    Given I start a noisy process                                                            PASSED  
    When I read the line 'Start with this' from noisy process                                PASSED  
    Then I read the line 'Then read this' from noisy process                                 PASSED  
    And I read the line 'Finally a .* pattern' from noisy process                            PASSED  
  Scenario: Process exits before match
Chorus --> INFO    - Processing scenario: Process exits before match
Chorus --> INFO    - About to run process:  <system specific process details replaced>
    Given I start a config1 process named lemming                                            PASSED  
    When I read the line 'it could never happen here' from the lemming process               FAILED  Process stopped while waiting for match (TailLogPatternMatcher:linenumber)-ChorusAssertionError
    Then this line will be skipped and the previous line will fail since process died        SKIPPED 
  Scenario: Process exits with error before match
Chorus --> INFO    - Processing scenario: Process exits with error before match
Chorus --> INFO    - About to run process:  <system specific process details replaced>
    Given I start a errorcode process named lemming                                          PASSED  
    When I read the line 'it could never happen here' from the lemming process               FAILED  Process stopped with error code 1 while waiting for match (TailLogPatternMatcher:linenumber)-ChorusAssertionError
    Then this line will be skipped and the previous line will fail since process died        SKIPPED 
  Scenario: Process exits with timeout before match
Chorus --> INFO    - Processing scenario: Process exits with timeout before match
Chorus --> INFO    - About to run process:  <system specific process details replaced>
    Given I start a noisytimeout process named anylastorders                                 PASSED  
    When I read the line 'it could never happen here' from the anylastorders process         FAILED  Timed out after 1 seconds (TailLogPatternMatcher:linenumber)-ChorusAssertionError
    Then this line will be skipped and the previous line will fail since anylastorders timed out SKIPPED 
  Scenario: I can read from std and std error separately
Chorus --> INFO    - Processing scenario: I can read from std and std error separately
Chorus --> INFO    - About to run process:  <system specific process details replaced>
    Given I start a outanderr process named poetical                                         PASSED  
    When I read the line 'The time has come, the Walrus said' from the poetical process      PASSED  
    Then I read the line 'To talk of many things' from the poetical process std error        PASSED  
    When I read the line 'Of shoes and ships and sealing-wax' from the poetical process      PASSED  
    Then I read the line 'Of cabbages and kings' from the poetical process std error         PASSED  
  Scenario: I can match a line without a line feed
Chorus --> INFO    - Processing scenario: I can match a line without a line feed
Chorus --> INFO    - About to run process:  <system specific process details replaced>
    Given I start a nolinefeed process named nolinefeed                                      PASSED  
    When I read 'without' from the nolinefeed process                                        PASSED  
    Then I write the line 'wibble' to the nolinefeed process                                 PASSED  
    And I read the line 'wibble' from the nolinefeed process                                 PASSED  
  Scenario: I can read with timeouts
Chorus --> INFO    - Processing scenario: I can read with timeouts
Chorus --> INFO    - About to run process:  <system specific process details replaced>
    Given I start a outputwithpauses process                                                 PASSED  
    And I read 'To' from the outputwithpauses process within 1 second                        PASSED  
    And I read the line 'Or not to be' from the outputwithpauses process within 1 second     PASSED  
    When I read 'That is' from the outputwithpauses process std error within 2 seconds       PASSED  
    Then I read the line 'the question' from the outputwithpauses process std error within 1 second FAILED  Timed out after 1 seconds (TailLogPatternMatcher:linenumber)-ChorusAssertionError


Features  (total:1) (passed:0) (failed:1)
Scenarios (total:9) (passed:5) (failed:4)
Steps     (total:33) (passed:26) (failed:4) (undefined:0) (pending:0) (skipped:3)