
//plugins {
//    id 'com.github.johnrengelman.shadow' version '6.1.0'
//}

// http://central.sonatype.org/pages/gradle.html#releasing-the-deployment-to-the-central-repository
// Apply the plugin to allow gradle to sign jars for Sonatype Maven central distribution
apply plugin: 'signing'

//shadowJar {
//    //prevents runtime/optional dependencies appearing in the shadow jar
//    configurations = [project.configurations.implementation]
//
//    //avoid the '-all' extension for the shadow jar since we want it to replace the
//    //main chorus jar, to include the classes from Chorus' internal dependencies
//    classifier = null
//}

description = "chorus"

sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources', 'src/test/java']
        }
    }
}

dependencies {
    compileOnly group: 'org.apache.ant', name: 'ant', version: '1.10.11'
    compileOnly group: 'junit', name: 'junit', version: '4.13.2'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testImplementation group: 'com.tngtech.archunit', name: 'archunit-junit4', version: '0.22.0'
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

}

task createChorusVersionResource(type: Copy) {
    from 'src/etc/CHORUS_VERSION'
    into 'src/main/resources'
    expand(version: project.version)
    filteringCharset = 'UTF-8'
}

processResources.dependsOn createChorusVersionResource


////// Maven publication


//task javadocJar(type: Jar) {
//    classifier = 'javadoc'
//}
//
//task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from sourceSets.main.allSource
//}

// Must be BELOW subprojects{}
task alljavadoc(type: Javadoc) {
    def sourceCollect = subprojects.collect { it.sourceSets.main.allJava }
    sourceCollect.add(sourceSets.main.allJava)
    source sourceCollect
    
    def collect = subprojects.collect { it.sourceSets.main.compileClasspath }
    collect.add(sourceSets.main.compileClasspath)
    classpath = files(collect)
    
    destinationDir = file("${buildDir}/docs/javadoc")
}

task javadocJar(type: Jar, dependsOn: alljavadoc) {
    classifier = 'javadoc'
    from alljavadoc.destinationDir
}

task sourcesJar(type: Jar) {
    sourceSets.main.allSource.sourceDirectories.asPath
    classifier = 'sources'
    def collect = subprojects.collect { it.sourceSets.main.allSource }
    collect.add(sourceSets.main.allSource)
    from collect
}

//shadowJar.finalizedBy javadocJar
//shadowJar.finalizedBy sourcesJar

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    repositories {
        maven {
            name = "ossrh"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }

        // Uncomment this only if your version ends with -SNAPSHOT, you'll get a 400 otherwhise.
        /*
        maven {
            name = "ossrhSnapshot"
            url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }*/
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'chorus'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'Chorus Open Source BDD Interpreter'
                url = 'http://www.chorus-bdd.org'

                scm {
                    connection = 'scm:git:https://github.com/Chorus-bdd/Chorus'
                    developerConnection = 'scm:git:https://github.com/Chorus-bdd/Chorus'
                    url = 'http://github.com/Chorus-bdd/Chorus'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'nick'
                        name = 'Nick Ebbutt'
                        email = 'admin@chorus-bdd.org'
                    }
                } 
                
//                pom.whenConfigured {
//                        //Filter all dependencies since we don't want to see any of Chorus internal
//                        //jars, and all others are optional anyway (TODO should we include these as Maven 'Optional' dependencies?
//                        //All chorus internal jars are not required since they are subsumed into the shadow jar by shadow plugin
//                    p -> p.dependencies = p.dependencies.findAll {
//                        dep -> dep.artifactId == "none" //filter all dependencies
//                    }
//                }
            }
        }
    }
}

signing {
    if (signArtifactsForPublication.toBoolean()) {
        sign publishing.publications.mavenJava
    }
}

//javadocJar.dependsOn(shadowJar)

