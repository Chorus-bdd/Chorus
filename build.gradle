
apply plugin: 'java-library-distribution'

def dependencyFile = new File("dependencies.gradle")

allprojects  {
    apply plugin: 'java'
    apply plugin: 'maven'

    repositories {
        mavenLocal()

        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    group = "org.chorusbdd"
    version = '3.0.0.DEV43'

    test {
        testLogging {
            // Make sure output from
            // standard out or error is shown
            // in Gradle output.
            showStandardStreams = true
        }
    }
}



/////////////////////////////////////////////////////////////////////////////////////////////////////
// Signing and Publication to Maven Central

configure([
        project(':chorus-selenium'),
        project(':chorus-sikulix'),
        project(':chorus-spring'),
        project(':chorus-websockets'),
        project(':chorus-sql')]) {

    println "Configuring extension... $project.name"

    // http://central.sonatype.org/pages/gradle.html#releasing-the-deployment-to-the-central-repository
    // Apply the plugin to allow gradle to sign jars for Sonatype Maven central distribution
    // All child projects will be independently signed and released
    apply plugin: 'signing'

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        if (signArtifactsForPublication.toBoolean()) {
            sign configurations.archives
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name description
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description mavenDescription
                    url 'http://www.chorus-bdd.org'

                    scm {
                        connection 'scm:git:https://github.com/Chorus-bdd/Chorus'
                        developerConnection 'scm:git:https://github.com/Chorus-bdd/Chorus'
                        url 'http://github.com/Chorus-bdd/Chorus'
                    }

                    licenses {
                        license {
                            name 'MIT'
                            url 'https://opensource.org/licenses/MIT'
                        }
                    }

                    developers {
                        developer {
                            id 'nick'
                            name 'Nick Ebbutt'
                            email 'admin@chorus-bdd.org'
                        }
                    }
                }
            }
        }
    }
}


///////////////////////////////////////////////////////////////////////////////////////
// Dependencies

//Add to all sub-projects a task which lets us calculate on demand the inter-module dependencies and create
//the dependencies file this project then consumes

subprojects {

    task updateGradleModuleDependencies {
        doLast {
            dependencyFile << "\n"
            dependencyFile << "project(':" + project.name + "') {\n"
            dependencyFile << "    dependencies {\n"

//            project.configurations.getByName("compile").allDependencies
//                    .findAll { depend -> depend.group.equals('org.chorusbdd') }
//                    .stream()
//                    .map({ dep -> dep.name })
//                    .distinct()
//                    .forEach { d -> dependencyFile << "        compile project (':" + d + "')\n" }

            //TODO deal correctly with test vs compile classpath
            project.configurations.getByName("testCompile").allDependencies
                    .findAll { depend -> depend.group.equals('org.chorusbdd') }
                    .stream()
                    .map({ dep -> dep.name })
                    .distinct()
                    .forEach { d -> dependencyFile << "        compile project (':" + d + "')\n" }

            dependencyFile << "    }\n"

            dependencyFile << "}\n"
        }
    }

}

task clearGradleModuleDependencies {
    doLast {
        dependencyFile.write "// Dependencies\n"
    }
}

task recalculateGradleDependencies

recalculateGradleDependencies.dependsOn clearGradleModuleDependencies, subprojects.updateGradleModuleDependencies

apply from: 'dependencies.gradle'


///////////////////////////////////////////////////////////////////////////////////////
// Distribution

//The dependencies from this project determine which jars get included in the
//distribution
dependencies {
    compile project ('chorus')
    compile project ('chorus-spring')
    compile project ('chorus-selenium')
    compile project ('chorus-websockets')
    compile project ('chorus-sql')

    //TODO Sikuli is omitted for now. It needs different jars for different OS and so would
    //require us to create distributions with differing contents
    //compile project ('chorus-sikulix')
}

distributions {
    main{
        baseName = 'chorus'
    }
}

