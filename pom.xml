<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.chorusbdd</groupId>
    <artifactId>chorusproject</artifactId>
    <packaging>pom</packaging>
	<version>2.0.2-SNAPSHOT</version>
	<name>Chorus BDD Project</name>
	<modules>
        <module>chorus-util</module>              <!-- lowest level utility classes -->
        <module>chorus-logging</module>           <!-- Chorus logging facade / logging abstractions over other logging provider -->
        <module>chorus-parser</module>            <!-- parsing of feature files and stepmacro files -->
        <module>chorus-results</module>           <!-- business objects which represent features / scenarios / steps / sessions -->
        <module>chorus-config</module>            <!-- utility to define and parse config switches and sys properties -->
        <module>chorus-executionlistener</module> <!-- Interface which can be implemented to receive interpreter lifecycle events locally or remotely -->
        <module>chorus-handlerconfig</module>     <!-- Utility classes to load property configs for handler classes  -->
        <module>chorus-output</module>            <!-- Chorus interpreter output, handle Chorus interpreter output and logging -->
        <module>chorus-annotations</module>       <!-- Annotations defined by chorus -->
        <module>chorus-stepinvoker</module>       <!-- Logic to discover and invoke steps -->
        <module>chorus-context</module>           <!-- Chorus context is a map of shared variables which is accessible to all methods implementing step logic -->
        <module>chorus-subsystem</module>         <!-- Interface implemented by Chorus' pluggable subsystems -->
        <module>chorus-remoting</module>          <!-- Chorus remoting is a pluggable subsystem which provides Chorus' remoting capabilities -->
        <module>chorus-processes</module>         <!-- Chorus remoting is a pluggable subsystem which provides Chorus' process management capabilities -->
        <module>chorus-handlers</module>          <!-- Chorus built in handler classes -->
        <module>chorus-pathscanner</module>       <!-- Utilities to scan the classpath to load handler classes and filesystem to load feature files -->
        <module>chorus-interpreter</module>       <!-- Main chorus interpreter -->
        <module>chorus</module>                   <!-- Assembly module to build the chorus release -->
        <module>chorus-spring</module>            <!-- Chorus extensions for Spring support -->
        <module>chorus-selftest</module>          <!-- Integration tests for the Chorus interpreter -->
	</modules>
</project>